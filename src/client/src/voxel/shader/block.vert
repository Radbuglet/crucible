#version 450

//> Attributes
layout(location = 0) in vec3 i_pos;
layout(location = 1) in uint i_face;

//> Uniforms
layout(binding = 0) uniform CameraUniform {
    mat4 view;
} u_cam;

//> Varyings
layout(location = 0) out vec2 v_tex_uv;

//> Static data
const float s_near = 0.1;
const float s_far = 500;

const vec3 s_mesh[36] = vec3[36](
    // Generated by "shared/examples/gen_mesh_static.rs"

    // Px (index 0)
    vec3(1, 0, 0),
    vec3(1, 1, 0),
    vec3(1, 0, 1),
    vec3(1, 1, 0),
    vec3(1, 1, 1),
    vec3(1, 0, 1),

    // Py (index 1)
    vec3(0, 1, 0),
    vec3(0, 1, 1),
    vec3(1, 1, 0),
    vec3(0, 1, 1),
    vec3(1, 1, 1),
    vec3(1, 1, 0),

    // Pz (index 2)
    vec3(0, 0, 1),
    vec3(1, 0, 1),
    vec3(0, 1, 1),
    vec3(1, 0, 1),
    vec3(1, 1, 1),
    vec3(0, 1, 1),

    // Nx (index 3)
    vec3(0, 0, 0),
    vec3(0, 0, 1),
    vec3(0, 1, 0),
    vec3(0, 0, 1),
    vec3(0, 1, 1),
    vec3(0, 1, 0),

    // Ny (index 4)
    vec3(0, 0, 0),
    vec3(1, 0, 0),
    vec3(0, 0, 1),
    vec3(1, 0, 0),
    vec3(1, 0, 1),
    vec3(0, 0, 1),

    // Nz (index 5)
    vec3(0, 0, 0),
    vec3(0, 1, 0),
    vec3(1, 0, 0),
    vec3(0, 1, 0),
    vec3(1, 1, 0),
    vec3(1, 0, 0)
);

const vec2 s_mesh_uv[6] = vec2[6](
    vec2(0, 0),
    vec2(0, 1),
    vec2(1, 0),

    vec2(0, 1),
    vec2(1, 1),
    vec2(1, 0)
);

//> Logic
void main() {
    vec4 vertex_pos = vec4(i_pos + s_mesh[gl_VertexIndex + i_face * 6], 1.0);
    v_tex_uv = s_mesh_uv[gl_VertexIndex];
    gl_Position = u_cam.view * vertex_pos;
}
